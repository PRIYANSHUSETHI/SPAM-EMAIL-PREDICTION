# -*- coding: utf-8 -*-
"""SPAM MAIL PREDICTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ISb5g09AQ29b9An_gdmDnkSPLCMzKops

MAILS ARE CLASSIFIED AS 2 TYPES: SPAM MAIL AND HAM MAIL

WORKFLOW: 1) MAIL DATA ---> 2) DATA PREPROCESSING ---> 3) TRAIN-TEST SPLIT ---> 4) LOGISTIC REGRESSION MODEL (COZ THESE ARE THE BEST WHEN IT COMES TO BINARY CLASSIFICATION) ---> 5) TRAINED MODEL
"""

# IMPORTING DEPENDENCIES
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer # USED TO CONVERT TEXT TO NUMBERS
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""DATA COLLECTION AND PREPROCESSING"""

# LOADING DATA FROM CSV FILE TO A PANDAS DF
raw_mail_data = pd.read_csv('mail_data.csv')
print(raw_mail_data)

# REPLACING NULL VALUES WITH A NULL STRING
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

mail_data.head()

mail_data.shape

"""LABEL ENCODING HAM MAILS TO 1 AND SPAM EMAILS TO 0"""

mail_data.loc[mail_data['Category']=='spam',['Category']] = 0
mail_data.loc[mail_data['Category']=='ham',['Category']] = 1

#SEPARATING DATA AS TEXTS AND LABEL
X= mail_data['Message']
Y = mail_data['Category']

print(X)

print(Y)

"""NOW WE SPLIT OUR DATA INTO TRAIN-TEST DATASETS FOR OUR MODEL"""

X_train, X_test, Y_train,Y_test = train_test_split(X, Y, test_size = 0.2, random_state= 3)

"""FEATURE EXTRACTION: TRANFORMING TEXT DATA INTO FEATURE VECTORS THAT CAN BE USED FOR OUR LOGISTIC REGRESSION MODEL"""

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase = True)

"""WHATS DOES THE ABPVE LINE OF CODE MEANS AND DOES:

1) TfidfVectorizer: This converts a collection of text documents into a matrix of TF-IDF (Term Frequency-Inverse Document Frequency) features, which is commonly used for text processing in machine learning models.

2) min_df=1: This means that a word must appear in at least one document to be included in the feature set. If it appeared in fewer documents, it would be ignored.

3) stop_words='english': This removes common English stop words (e.g., "the," "is," "and") to reduce noise and focus on meaningful words.

4) lowercase=True: This converts all text to lowercase to ensure consistency and avoid treating "Hello" and "hello" as different words.
"""

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test) #THIS IS NOT FITTED, ONLY THE TRAIN DATA IS FITTED AND TRANSFORMED...REMEMBER THIS

# WE NOW CONVERT Y_train AND Y_test VALUES TO INTEGER
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

"""TRAINING THE MODEL WITH THE TRAINING DATA"""

model = LogisticRegression()

model.fit(X_train_features, Y_train)

"""EVALUATING THE TRAINED MODEL

NOTE TO SELF:

training data is used to train the model and the test data is passed through the model to get an idea of how accurate my model is.
Accuracy score can also be calculated for the training data, this would tell us how well my model is working with respect to the training dataset
use this accuracy score to know how model is predicting, if it's not good, tune your model or change your model
"""

# PREDICTION ON TRAINING DATA
prediction_on_training_data = model.predict(X_train_features)
accuracy = accuracy_score(Y_train, prediction_on_training_data)
accuracy

# PREDICTION ON TEST DATA
prediction_on_test_data = model.predict(X_test_features)
accuracy = accuracy_score(Y_test, prediction_on_test_data)
accuracy

"""THE VALUES OF ACCURACY SCORE FOR BOTH THE TEST AND TRAINING DATASET IS IN SIMILAR RANGE, TELLING US THAT THE MODEL HAS NOT OVERFITTED ANYDATA

BUILDING A PREDICTIVE SYSTEM
"""

input_mail = ["Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's"]
#CONVERT TEXT TO FEATURE VECTORS
input_data_features = feature_extraction.transform(input_mail)

#MAKING PREDICTIONS
prediction = model.predict(input_data_features)

if prediction[0] == 1:
    print('HAM MAIL')
else:
      print('SPAM MAIL')

